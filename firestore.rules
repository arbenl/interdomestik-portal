
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() { return request.auth != null; }
    function hasToken() { return signedIn() && request.auth.token != null; }
    function isAdmin() { return hasToken() && request.auth.token.role == 'admin'; }
    function isAgent() { return hasToken() && request.auth.token.role == 'agent'; }
    function isSelf(uid) { return signedIn() && request.auth.uid == uid; }
    // Safe helpers for region checks â€” never evaluate `in` on null
    function allowedRegionsOrEmpty() {
      return signedIn()
        ? (request.auth.token != null
            ? ((request.auth.token.allowedRegions is list)
                ? request.auth.token.allowedRegions
                : [])
            : [])
        : [];
    }
    function adminHasRegion(region) {
      // Admins: full access if no regions are set; otherwise region must be included
      let l = allowedRegionsOrEmpty();
      return isAdmin() && (
        l.hasOnly([]) || ( (region is string) && (l.size() > 0) && (region in l) )
      );
    }
    function agentHasRegion(region) {
      // Agents must have a list and the region must be included
      let l = allowedRegionsOrEmpty();
      return isAgent() && ( (region is string) && (l.size() > 0) && (region in l) );
    }
    function agentOwns(uid) {
      return isAgent() && resource.data.agentId == request.auth.uid;
    }

    match /users/{uid} {
      allow read: if isSelf(uid) || isAdmin();
      allow write: if isAdmin();
    }

    match /members/{uid} {
      // Read self; admins (optionally region-limited); agents only their assigned members
      allow read: if isSelf(uid)
        || adminHasRegion(resource.data.region)
        || agentOwns(uid);
      // split create into separate rules to avoid evaluating agent clause for self-writes
      allow create: if isSelf(uid);
      // Agents cannot create member docs directly (must use backend callable)
      // Admins can create/update only within allowedRegions (or full access if claim not set as list)
      allow create: if adminHasRegion(request.resource.data.region);
      // split update similarly
      allow update: if adminHasRegion(resource.data.region);
      // Members can only edit a safe subset of fields
      allow update: if isSelf(uid) &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(["name","region","phone","orgId"]);
      // Agents can edit the same safe subset but only for their assigned members
      allow update: if agentOwns(uid) &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(["name","region","phone","orgId"]);
      allow delete: if isAdmin();
    }

    match /members/{uid}/memberships/{year} {
      allow read: if isSelf(uid) || isAdmin();
      allow write: if isAdmin();
    }

    match /registry/{path=**} { allow read, write: if false; }

    // Public events: readable by signed-in users; writable by admins only
    match /events/{eventId} {
      allow read: if signedIn();
      allow write: if isAdmin();
    }

    // Billing invoices: readable by owner and admins; client writes are disallowed
    match /billing/{uid}/invoices/{invoiceId} {
      allow read: if isSelf(uid) || isAdmin();
      allow write: if false;
    }

    // Metrics: allow admins to read/write root docs like metrics/daily-YYYY-MM-DD
    match /metrics/{id} {
      allow read, write: if isAdmin();
    }
    match /audit_logs/{id} {
      allow read, write: if isAdmin();
    }
    match /reports/{id} {
      allow read, write: if isAdmin();
    }
    match /orgs/{id} {
      allow read, write: if isAdmin();
    }
    match /coupons/{id} {
      allow read, write: if isAdmin();
    }
    match /api_keys/{id} {
      allow read, write: if isAdmin();
    }

    match /mail/{id} {
      allow read, write: if false;
    }
  }
}
