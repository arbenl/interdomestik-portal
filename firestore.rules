
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() { return request.auth != null; }
    function hasToken() { return signedIn() && request.auth.token != null; }
    function isAdmin() { return hasToken() && request.auth.token.role == 'admin'; }
    function isAgent() { return hasToken() && request.auth.token.role == 'agent'; }
    function isSelf(uid) { return signedIn() && request.auth.uid == uid; }
    function adminHasRegion(region) {
      // Admins: if allowedRegions not present as a list, treat as full access; otherwise enforce list
      return isAdmin() && (
        !(request.auth.token.allowedRegions is list) ||
        (region in request.auth.token.allowedRegions)
      );
    }
    function agentHasRegion(region) {
      // Agents must have an allowedRegions list and the region must be in it
      return isAgent() && (request.auth.token.allowedRegions is list) &&
        (region in request.auth.token.allowedRegions);
    }

    match /users/{uid} {
      allow read: if isSelf(uid) || isAdmin();
      allow write: if isAdmin();
    }

    match /members/{uid} {
      // Read self; agents/admins limited by region. Admin without allowedRegions list â†’ full access
      allow read: if isSelf(uid)
        || adminHasRegion(resource.data.region)
        || agentHasRegion(resource.data.region);
      // split create into separate rules to avoid evaluating agent clause for self-writes
      allow create: if isSelf(uid);
      // Agents cannot create member docs directly (must use backend callable)
      // Admins can create/update only within allowedRegions (or full access if claim not set as list)
      allow create: if adminHasRegion(request.resource.data.region);
      // split update similarly
      allow update: if adminHasRegion(resource.data.region);
      // Members can only edit a safe subset of fields
      allow update: if isSelf(uid) &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(["name","region","phone","orgId"]);
      // Agents can edit the same safe subset within their allowed regions
      allow update: if agentHasRegion(resource.data.region) &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(["name","region","phone","orgId"]);
      allow delete: if isAdmin();
    }

    match /members/{uid}/memberships/{year} {
      allow read: if isSelf(uid) || isAdmin();
      allow write: if isAdmin();
    }

    match /registry/{path=**} { allow read, write: if false; }

    // Public events: readable by signed-in users; writable by admins only
    match /events/{eventId} {
      allow read: if signedIn();
      allow write: if isAdmin();
    }

    // Billing invoices: readable by owner and admins; client writes are disallowed
    match /billing/{uid}/invoices/{invoiceId} {
      allow read: if isSelf(uid) || isAdmin();
      allow write: if false;
    }

    // Metrics: allow admins to read/write root docs like metrics/daily-YYYY-MM-DD
    match /metrics/{id} {
      allow read, write: if isAdmin();
    }
    match /audit_logs/{id} {
      allow read, write: if isAdmin();
    }

    match /mail/{id} {
      allow read, write: if false;
    }
  }
}
