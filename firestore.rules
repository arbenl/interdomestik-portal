rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() { return request.auth != null; }
    function isAdmin() { return signedIn() && request.auth.token.role == 'admin'; }
    function isAgent() { return signedIn() && request.auth.token.role == 'agent'; }
    function isOwner(uid) { return signedIn() && request.auth.uid == uid; }

    // Members collection: member profiles
    match /members/{uid} {
      // Read: owner, admin, agent
      allow read: if isOwner(uid) || isAdmin() || isAgent();
      // Writes via backend only (callables/Admin SDK). Disallow client writes by default.
      allow create, update, delete: if false;

      // Nested memberships per year
      match /memberships/{year} {
        // Read: owner, admin, agent
        allow read: if isOwner(uid) || isAdmin() || isAgent();
        // Client writes not allowed; performed by backend
        allow create, update, delete: if false;
      }
    }

    // Billing: invoices per user
    match /billing/{uid}/invoices/{invoiceId} {
      // Owner and admins can read billing documents
      allow read: if isOwner(uid) || isAdmin();
      // Writes performed by backend only (webhooks/Admin SDK)
      allow create, update, delete: if false;
    }

    // Events visible to authenticated users; admin manages
    match /events/{eventId} {
      allow read: if signedIn();
      allow create, update, delete: if isAdmin();
    }

    // Metrics and reports: admin-only reads
    match /metrics/{docId} {
      allow read: if isAdmin();
      allow write: if false;
    }
    match /reports/{docId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    // Portal layouts: members can only manage their own dashboard configuration
    match /portalLayouts/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // Assistant session logs: owner or admins may read conversation history
    match /assistantSessions/{uid} {
      allow read: if isOwner(uid) || isAdmin();
      allow create, update, delete: if false;

      match /messages/{messageId} {
        allow read: if isOwner(uid) || isAdmin();
        allow create, update, delete: if false;
      }
    }

    match /documentShares/{shareId} {
      function canViewShare() {
        return isAdmin() ||
          (resource.data.ownerUid != null && isOwner(resource.data.ownerUid)) ||
          (resource.data.allowedUids != null && resource.data.allowedUids.hasAny([request.auth.uid]));
      }

      allow read: if signedIn() && canViewShare();
      allow create, update, delete: if false;

      match /activity/{activityId} {
        allow read: if signedIn() && (
          isAdmin() ||
          (get(/databases/$(database)/documents/documentShares/$(shareId)).data.ownerUid != null &&
            isOwner(get(/databases/$(database)/documents/documentShares/$(shareId)).data.ownerUid)) ||
          (get(/databases/$(database)/documents/documentShares/$(shareId)).data.allowedUids != null &&
            get(/databases/$(database)/documents/documentShares/$(shareId)).data.allowedUids.hasAny([request.auth.uid]))
        );
        allow create, update, delete: if false;
      }
    }

    match /automationLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    match /automationAlerts/{alertId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    match /alertAcknowledgements/{alertId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    match /assistantTelemetry/{entryId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    // Internal/administrative collections: deny client access
    match /coupons/{id} { allow read, write: if false; }
    match /orgs/{id} { allow read, write: if false; }
    match /registry/{kind}/{key} { allow read, write: if false; }
    match /audit_logs/{id} { allow read, write: if false; }
    match /exports/{id} {
      allow read, create: if isAdmin();
      allow update, delete: if false;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
