// rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() { return request.auth != null; }
    function userRole() {
      return signedIn()
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : null;
    }
    function isAdmin() { return userRole() == 'admin'; }
    function isAgent() { return userRole() == 'agent'; }
    function isOwner(ownerUid) { return signedIn() && ownerUid == request.auth.uid; }

    match /users/{uid} {
      allow read: if signedIn() && (request.auth.uid == uid || isAdmin());
      allow create: if isAdmin();
      allow update: if isAdmin()
        || (request.auth.uid == uid && request.resource.data.role == resource.data.role);
      allow delete: if isAdmin();
    }

    match /memberships/{docId} {
      allow create: if signedIn();
      allow read:   if signedIn() && (isOwner(resource.data.ownerUid) || isAdmin() || isAgent());
      allow update: if signedIn() && (
          (isOwner(resource.data.ownerUid) && request.resource.data.ownerUid == resource.data.ownerUid)
          || isAdmin() || isAgent()
        );
      allow delete: if isAdmin();
    }

    match /claims/{docId} {
      allow create: if signedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow read:   if signedIn() && (isOwner(resource.data.ownerUid) || isAdmin() || isAgent());
      allow update: if signedIn() && (isOwner(resource.data.ownerUid) || isAdmin() || isAgent());
      allow delete: if isAdmin();
    }
  }
}